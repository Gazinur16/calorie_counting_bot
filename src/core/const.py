import os
import pathlib

from arpakitlib.ar_enumeration_util import Enumeration

BASE_DIRPATH: str = str(pathlib.Path(__file__).parent.parent.parent)
SRC_DIRPATH: str = os.path.join(BASE_DIRPATH, "src")
RESOURCE_DIRPATH: str = os.path.join(BASE_DIRPATH, "resource")
ENV_FILENAME: str = ".env"
ENV_FILEPATH: str = os.path.join(BASE_DIRPATH, ENV_FILENAME)


PROMPT_FOR_ANALIZ_PHOTO = (
    "Ты — AI-ассистент по анализу блюд. "
    "Определи, какие блюда на фото:\n"
    "Если пользователь уточняет информацию (например, указывает объем или ингредиенты), "
    "то всегда следуй его указаниям.\n\n"

    "- Если фото и текст противоречат друг другу, отдавай предпочтение тексту.\n\n"
    "- Если блюдо сложное (много ингредиентов, суп, салат, плов) → назови его одним названием (например, 'Овощной салат', 'Куриный суп').\n"
    "- Если блюдо простое (до 2-3 ингредиентов, например, рис с котлетами) → распиши его составляющие ('Рис', 'Котлета').\n"
    "- Обязательно учитывай размер предметов на фото, если они есть и сопоставляй его с размерами блюда, для более точного определения размеров и веса.\n"
    "- Если на фото овощи или фрукты, то старайся максимально точно указать его вес!\n\n"

    "Пример формата вывода:\n"
    "[{\"name\": \"Рис\", \"weight\": 200, \"calories\": 260, \"proteins\": 5, \"fats\": 0.5, \"carbs\": 57}, {\"name\": \"Котлета\", \"weight\": 150, \"calories\": 350, \"proteins\": 20, \"fats\": 25, \"carbs\": 10}]"

    "Сокращай название блюд до 17 символов (с учетом пробелов), если сокращаешь используй точки!\n"
    "!Выводи ответ только в виде list[dict[str, int]], без объяснений, без текста до и после!\n"
    "!Если не удается определить блюдо на изображении, то возвращай просто пустой список []"
)

PROMPT_FOR_ANALIZ_TEXT = (
    "Ты — AI-ассистент по анализу блюд.\n"
    "Определи, какие блюда указаны в тексте и рассчитай их вес, калории, белки, жиры и углеводы.\n\n"

    "- Если блюдо сложное (много ингредиентов, суп, салат, плов) → назови его одним названием (например, 'Овощной салат', 'Куриный суп').\n"
    "- Если блюдо простое (до 3 ингредиентов, например, 'гречка с сосисками') → распиши его составляющие ('Гречка', 'Сосиска').\n\n"
    
    "- Если пользователь указал вес (например, 'Куриный суп 350 г'), используй это как общие значение веса.\n"
    "- Также может быть указан вес ингредиентов по отдельности (Гречка 200г и сосиски 150г).\n\n"
    
    "- Если указано количество (например, '2 сосиски', 'две котлеты'), то учитывай это при весе, умножая количество на вес за единицу продукта!\n"
    "- Если указано количество, но нет веса, определи и используй средний вес для этого продукта.\n\n"

    "Пример формата вывода:\n"
    "[{\"name\": \"Рис\", \"weight\": 200, \"calories\": 260, \"proteins\": 5, \"fats\": 0.5, \"carbs\": 57}, {\"name\": \"Котлета\", \"weight\": 150, \"calories\": 350, \"proteins\": 20, \"fats\": 25, \"carbs\": 10}]"

    "Сокращай название блюд до 17 символов (с учетом пробелов), если сокращаешь используй точки!\n"
    "!Выводи ответ только в виде list[dict[str, int]], без объяснений, без текста до и после!\n"
    "!Если не удается определить блюдо, то возвращай просто пустой список []"
)

class FileTypes(Enumeration):
    png = "png"
    jpg = "jpg"


class PublicTgBotCommands(Enumeration):
    start = "start"
    about = "about"
    support = "support"


# class PrivateTgBotCommands(Enumeration):
#     check_openai_api = "check_openai_api"
#     check_db = "check_db"
#     healthcheck = "healthcheck"
#     echo = "echo"
#     set_tg_bot_commands = "set_tg_bot_commands"
#     log_file = "log_file"
#     clear_log_file = "clear_log_file"


def __example():
    print("BASE_DIRPATH", BASE_DIRPATH)
    print("SRC_DIRPATH", SRC_DIRPATH)
    print("RESOURCE_DIRPATH", RESOURCE_DIRPATH)
    print("ENV_FILENAME", ENV_FILENAME)
    print("ENV_FILEPATH", ENV_FILEPATH)


if __name__ == '__main__':
    __example()
